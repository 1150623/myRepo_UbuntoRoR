############################################################
#
# Fiabilidade
#
# A taxa m?dia de falhas, lambda, ? dado por:
#
#     Lambda = ( nr de Falhas  /  tempo de operacao )
#
#        Unidade de medida: h^-1 (inverso de hora)
#
#
#
# Lambda = 15/3350; (TP4_Ex1)
# Lambda = 0.004477612
# Lambda
#
#
# MTTF (Mean Time To Failure) =  ( tempo de operacao  /  nr de falhas )
# Unidade de medida: h (horas)
#
# Se a taxa de falhas for considerada constante, no periodo de vida ?til:
#
# Funcao de fiabilidade:
#
#     R(t) = e^(-Lambda*t)
#
############################################################
###########
#   EX1   #
###########
Lambda_1 = 15/3350;
Lambda_1
###########
#   EX2   #
###########
# Assimindo que a taxa de falha ? constante, tem-se que a probabilidade de sobreviv?ncia no instante t, ou seja, a fun??o de fiabilidade R(t) obedece a uma distribui??o exponencial, isto ?:
# R(t) = e^(-Lambda*t)
# Como:   MTTF = 1/Lambda <=> Lambda = 1/MTTF
MTTF_2 = 17500
Lambda_2 = 1/MTTF_2
tf_2 = 3000
# A fiabilidade do equipameto ? a probabilidade de que o bem funcione corretamente nas condicoes e no periodo de tempo referidos
R3000_2 = exp(-Lambda_2 * tf_2)
R3000_2 = round(R3000_2*100,1)
R3000_2 # = 0.8424604
# Resposta: A probabilidade de o equipamento funcionar, sem falhas, durante 3000 horas e de 84.26%
###########
#   EX3   #
###########
MTTF_3 = 4.5
# Alinea A)
# Seja T a variavel aleatoria "Tempo de funcionamento sem avarias da referida maquina". Sabemos que:
# T ~ Exp(Lambda)   onde o valor esperado e 1/Lambda
# T ~ Exp(1/4.5)
Lambda_3 = 1/MTTF_3 # 1/4.5 = 0.2222222 avarias/hora
Lambda_3
# P(T >= 6) = R(6)
R6_3 = exp(-Lambda_3*6)
R6_3
R6_3 = round(R6_3*100, 1) #26,3%
# Alinea B)
# P (T>6 | T>4) = P(T>6) / P(T>4) = (e^(-6t)) / (e^(-4t)) = e^(-2t)   =   P(T>2)
# Assim:
# P (T>6 | T>4) = P(T>2), pois a distribui??o exponencial n?o tem mem?ria dos acontecimentos passados
#
# P(T>2) = R(2) = e^(-Lambda * 2), por isso:
R2_3 = exp(-Lambda_3*2)
R2_3
R2_3 = round(R2_3*100,1) # 64.1%
###########
#   EX4   #
###########
MTTF_4 = 12000 # horas
Lambda_4 = 1/MTTF_4
vidaUtil_4 = 3625
# Alinea A)
R3625_4 = exp(-Lambda_4*vidaUtil_4)
R3625_4 = round(R3625_4*100,1)
R3625_4 # 73.9%
# Logo, a probabilidade de a lampada funicionar, sem falhas, durante o seu tempo de vida ?til, ? de ~74%
# Alinea B)
# P(T>2000)= R(2000)
R2000_4 = exp(-Lambda_4*2000)
R2000_4 = round(R2000_4*100,1)
R2000_4 # 84.6%
###########
#   EX5   #
###########
t.atividade = c(20.2,6.1, 24.4, 35.3, 5.3, 46.7, 4)
t.reparacao = c(2.1, 7.1, 4.2, 1.8, 3.5, 8.3)
# Alinea A)
# A taxa m?dia de falhas, Lambda, ? dado por:
# Lambda = Nr falhas / tempo opera??o
n.falhas = length(t.reparacao)
t.operacao = sum(t.atividade)
t.operacao
Lambda_5 = n.falhas / t.operacao
Lambda_5
# Alinea B)
MTTF_5 = 1/Lambda_5
MTTF_5 = round(MTTF_5, 1)
MTTF_5 # 23.7 horas
sum(t.atividade)/6
###########
#   EX6   #
###########
# Alinea a)
t.ativ = c(10, 20, 17, 6, 14, 9) # dura??io dos tempos de atividade
t.falh = c(15, 10, 7, 4, 8) # dura??o das falhas em minutos
n.falhas = length(t.falh)
lambda_6_min = n.falhas/sum(t.ativ);
lambda_6_min # (em minutos = 0.06578947 falhas/minuto)
lambda_6 = lambda_6_min*60;
lambda_6 # (em horas = 3.947368 falhas/hora)
# Alinea b)
MTTF_6 = 1/lambda_6
MTTF_6 # = 0.2533333 horas
MTTR_6 = mean(t.falh)/60 # 0.2533333
MTTR_6 # = 0.1466667 horas
MTBF_6 = MTTF_6 + MTTR_6
MTBF_6 # = 0.4 horas
# Alinea c)
D_6 = MTTF_6 / (MTTF_6 + MTTR_6)
D_6 # = 0.6333333 -> 63%
#Alinea d
I_6 = 1 - D_6
I_6 # 0.366666667
###########
#   EX7   #
###########
# Alinea a)
# Em 1000 horas falharam 0.5% dos carburadores testados, logo sobreviveram 99.5% dos carburadores testados. Deste modo R(1000) = 1 - F(1000) = 1 - 0.005 = 0.995
# Logo, a probabilidade de o equipamento funcionar, sem falhas, durante 1000 horas, ? de 99.5%
# Alinea b)
Na_7 = 0.005 * 200
Na_7 # = 1
# Resposta: 1 carburador
# Alinea c)
# A fun??o de fiabilidade R(t) - probabilidade de sobrevivencia no intante t - e definida pela expressao:
#   R(t) = exp(-lambda * t) = exp(-t / MTTF)
# Como R(1000) = 0.995, tem-se que: 0.995 = exp(- 1000 / MTTF) <=> MTTF = - 1000 / log(0.995)
MTTF_7 = - 1000 / log(0.995) # aten??o: log = ln
MTTF_7 # 199499.6 horas
RMTTF_7 = exp(-MTTF_7 / MTTF_7)
RMTTF_7 # = 0.3678794 (36.8%)
tu_7 = 5*365*10;
tu_7 #
R.tu_7 = exp(- tu_7 / MTTF_7)
R.tu_7
MTTF_7 = - 1000 / log(0.995) # atencao: log = ln
MTTF_7 # 199499.6 horas
RMTTF_7 = exp(-MTTF_7 / MTTF_7)
RMTTF_7 # = 0.3678794 (36.8%)
tu_7 = 5*365*10;
tu_7 # = 18250
R.tu_7 = exp(- tu_7 / MTTF_7)
R.tu_7 # = 0.9125806
R1000_7 = exp(-1000/MTTF_7)
R1000_7
D_7 = MTTF_7 / (MTTF_7 + MTTR_7)
D_7
MTTR_7 = 100
D_7 = MTTF_7 / (MTTF_7 + MTTR_7)
D_7
espessura = c(30,30,30,30,31,32,32,32,32,33,33,34,34,34,35)
espessura = c(30,30,30,30,31,32,32,32,32,33,33,34,34,34,35)
t.test(espessura, alternative = "twp.sided", mu = 32.5, conf.level = 0.95)
t.test(espessura, alternative = "two.sided", mu = 32.5, conf.level = 0.95)
t_obs = (mean(espessura) - 32.5) / (sd(espessura)/sqrt(15))
t_obs
peso = c(2550,2550,2450,2560,2520,2530,2530,2500,2490,2510,2520,2520,2530,2510,2550,2550)
t.test(peso, alternative="greater", mu = 2500)
comfio = c(2300,2000,1800,2000,2400,2200,2000,1800,1900,2100,2200,2400)
semfio = c(2400,2200,1800,1900,1800,1900,2100,2050,2200,2000,1900,2000)
dados <- as.data.frame(cbind(comfio,semfio))
View(dados)
library(reshape2) # para utilizar a funao 'melt()'
install.packages("reshape2")
library(reshape2) # para utilizar a funao 'melt()'
Mdados = melt(dadis, variable.name = "Tipo", value.name = "Velocidade")
Mdados = melt(dados, variable.name = "Tipo", value.name = "Velocidade")
dados <- as.data.frame(cbind(comfio,semfio))
View(dados)
# Recriar a data.frame com 1 unica variavel de velocidade e um fator Tipo
#q
library(reshape2) # para utilizar a funao 'melt()'
Mdados = melt(dados, variable.name = "Tipo", value.name = "Velocidade")
View(Mdados)
library(car) # para utilizar a funcao Levene
install.packages("car")
t.test(comfio, semfio, alternative = "two.sided", var.equal = TRUE, paired = FALSE)
# Fazemos previamente um teste a igualdade de variancias
# Teste de Levene para igualdade de variancias
# Criar data.frame
dados <- as.data.frame(cbind(comfio,semfio))
View(dados)
# Recriar a data.frame com 1 unica variavel de velocidade e um fator Tipo
#que identifica a que tipo de rato pertence
library(reshape2) # para utilizar a funao 'melt()'
Mdados = melt(dados, variable.name = "Tipo", value.name = "Velocidade")
View(Mdados)
# Fazer teste de Levene
library(car) # para utilizar a funcao Levene
comfio = c(2300,2000,1800,2000,2400,2200,2000,1800,1900,2100,2200,2400)
semfio = c(2400,2200,1800,1900,1800,1900,2100,2050,2200,2000,1900,2000)
# Teste de Levene para igualdade de variancias
# Criar data.frame
dados <- as.data.frame(cbind(comfio,semfio))
View(dados)
# Recriar a data.frame com 1 unica variavel de velocidade e um fator Tipo
library(reshape2) # para utilizar a funao 'melt()'
Mdados = melt(dados, variable.name = "Tipo", value.name = "Velocidade")
library(car) # para utilizar a funcao Levene
leveneTest(Velocidade ~ Tipo, Mdados, center = median) # center = mean
var.test(comfio,semfio,alternative="two.sided", conf.level = 0.99)
t.test(comfio, semfio, alternative = "two.sided", var.equal = TRUE, paired = FALSE)
t.test(maoEsquerda, maoDireita, alternative="greater",paired=TRUE)
maoEsquerda
maoDireita = c(138,89,126,128,92,122)
maoEsquerda = c(140,90,125,130,95,121)
t.test(maoEsquerda, maoDireita, alternative="greater",paired=TRUE)
t.test(maoEsquerda, maoDireita, alternative="greater", conf.level = 0.95, paired=TRUE)
t.test(maoEsquerda, maoDireita, alternative="greater", conf.level = 0.05, paired=TRUE)
t.test(maoEsquerda, maoDireita, alternative="greater", conf.level = 0.05, paired=TRUE)
t.test(maoEsquerda, maoDireita, alternative="greater", conf.level = 0.05, paired=TRUE)
t.test(maoEsquerda, maoDireita, alternative="greater", paired=TRUE)
t.test(maoEsquerda, maoDireita, alternative="greater", conf.level=0.95,paired=TRUE)
t.test(maoEsquerda, maoDireita, alternative="greater",paired=TRUE)
t.test(maoEsquerda, maoDireita, alternative="greater", conf.level=0.95,paired=TRUE)
t.test(maoEsquerda, maoDireita, alternative="greater", paired=TRUE)
antesObras = c(20,35,40,55,60,75,95,100,90,80,45,25)
depoisObras = c(25,30,45,75,80,100,100,100,100,85,65,30)
antesObras = c(20,35,40,55,60,75,95,100,90,80,45,25)
depoisObras = c(25,30,45,75,80,100,100,100,100,85,65,30)
t.test(antesObras, depoisObras, alternative="less", paired = TRUE)
var.test(comfio,semfio,alternative="two.sided", conf.level = 0.99)
var.test(MarcaA,MarcaB,alternative="two.sided", conf.level = 0.99)
rcaA = c(6.3,5.2,6.0,6.1,6.5,5.6,5.8,6.0,5.9,5.8,5.9,6.2)
MarcaB = c(4.8,6.7,7.1,5.0,6.2,6.1,6.0,5.9,7.0,4.5,5.3,6.2)
MarcaA = c(6.3,5.2,6.0,6.1,6.5,5.6,5.8,6.0,5.9,5.8,5.9,6.2)
MarcaB = c(4.8,6.7,7.1,5.0,6.2,6.1,6.0,5.9,7.0,4.5,5.3,6.2)
var.test(MarcaA,MarcaB,alternative="two.sided", conf.level = 0.90)
var.test(MarcaA,MarcaB,alternative="two.sided", conf.level = 0.90)
library(reshape2)
library(car)
dados = as.data.frame(cbind(MarcaA, MarcaB))
Mdados = melt(dados, variable.name = "Marca", value.name = "Duracao")
leveneTest(Duracao ~ Marca, Mdados, center=median)
